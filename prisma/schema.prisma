datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    telegramID     Int?            @unique
    createdAt      DateTime        @default(now())
    username       String?         @unique @db.VarChar(255)
    password       String?
    answers        UserAnswer[]
    tokens         SessionToken[]
    deeplinkTokens DeeplinkToken[]
    state          State?
}

enum State {
    RANDOM
    ADAPTIVE
}

model SessionToken {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user      User     @relation(fields: [userID], references: [id])
    userID    String   @db.Uuid
    createdAt DateTime @default(now())
    active    Boolean  @default(true)
}

model QuestionCategory {
    id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String     @unique @db.VarChar(255)
    verbose_name String?
    questions    Question[]
}

model Question {
    id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    category           QuestionCategory? @relation(fields: [categoryID], references: [id])
    categoryID         String?           @db.Uuid
    img                String?           @db.VarChar(255)
    title              String            @db.Text
    answer_explanation String            @db.Text
    answers            Answer[]
    userAnswers        UserAnswer[]
}

model Answer {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    text       String    @db.Text
    correct    Boolean   @default(false)
    question   Question? @relation(fields: [questionID], references: [id])
    questionID String?   @db.Uuid
}

model UserAnswer {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    correct    Boolean  @default(false)
    createdAt  DateTime @default(now())
    question   Question @relation(fields: [questionID], references: [id])
    questionID String   @db.Uuid
    user       User     @relation(fields: [userID], references: [id])
    userID     String   @db.Uuid
}

model DeeplinkToken {
    token  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    user   User   @relation(fields: [userID], references: [id])
    userID String @db.Uuid
}
